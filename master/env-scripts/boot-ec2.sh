#!/bin/bash
#
# vscape      This shell script takes care of starting and stopping vscape
#
# chkconfig: 345 80 20
#
### BEGIN INIT INFO
# Provides: vscape
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Description: VScape orchestrator v1.0
# Short-Description: start and stop vscape
### END INIT INFO

export LC_CTYPE=UTF-8
RETVAL=0

ulimit -n 9172

###########
## setup for autoboot
##   1. Copy to /etc/init.d as vscape
##   2. Install script using - 'chkconfig --add vscape' 
##
## When deploying change the following to EC2
## NOTE: 
##     EC2 -  AMI launched from cmd line with arguments as follow below - i.e. -d '-boot=true ...."
## 
##   DYNDNS -    from http://www.dyndns.com/developers/specs/syntax.html - not passing in the IP assumes the callers ip address
##
## NOTE 
##       - pid files are generated in /tmp and generated by boot.sh
##       - To use this on your local machine - change the ENV to LOCAL  - AND change the -boot=true OR -boot=false depending 
##        on if you want to start the Boot agent instance
##
##       The following line is user-data metadata attached to each AMI when it is launched - we use it to control the behaviour of vscape.
##       When running locally the curl request is faked. 
##
##       **  echo "-boot=true vso-ec2-internal.dyndns.org 11000 2 vso-ec2.dyndns.org 3" > $USERFILE
## 
## ARGS:      BOOT/AGENT      : -boot=true 
##            LUAddress       : vso-ec2-internal.dyndns.org 
##            LUPORT          : 11000 
##            SLOTS Per Agent : 2 
##            EXTERNAL DNS    : vso-ec2.dyndns.org 
##            NUMBER OF AGENTS: 3
##
############

#ENV=EC2
ENV=LOCAL

echo "Vscape Booting with Config:" + $ENV

## DYNDNS Account info
USER="llabs" 
PASS="ll4bs1234"

USERFILE=/tmp/user-data.out

if [ "$ENV" = "LOCAL" ]; then
	    TMP=/tmp
else
	    TMP=/mnt
fi

function collectConfigData() {
	if [ "$ENV" = "LOCAL" ]; then
	    ROOT=~/vscape-install

#### >>> MODIFY FOLLOWING LINE TO CHANGE LOCAL EXECUTION BEHAVIOUR - see above for params
####	    echo "-boot=true vso-ec2-internal.dyndns.org 11000 2 vso-ec2.dyndns.org 3" > $USERFILE
####	    echo "-boot=false vso-ec2-internal.dyndns.org 11000 2 vso-ec2.dyndns.org 3" > $USERFILE
	    echo "-boot=true 192.168.1.100 11000 2 192.168.1.100 1" > $USERFILE
	else 
	    # collect the instance data for the AMI
	    # EC2s meta-lookupservice - http://developer.amazonwebservices.com/connect/entry.jspa?externalID=1085
	    ROOT=
	    curl  http://169.254.169.254/1.0/user-data > $USERFILE
	fi
}


function updateDNS_LOCAL () { 
    echo "Updating DNS to be:$DNS";
    ### get my ipaddress
    MY_IP=192.168.1.100;
    echo "Got Address:$MY_IP"


#    NOTE if you dont pass in the IP - it will assume the callers IP address
##   curl "http://$USER:$PASS@members.dyndns.org/nic/update?hostname=$LUHOST&myip=$MY_IP"

##   curl "http://$USER:$PASS@members.dyndns.org/nic/update?hostname=$PUBLIC&myip=$MY_IP"
}


function updateDNS_EC2 () { 
    ### http://docs.amazonwebservices.com/AWSEC2/2007-01-03/DeveloperGuide/AESDG-chapter-instancedata.html
    ### AND
  
    echo "Updating DNS to be:$DNS";
    MY_IP=`curl http://169.254.169.254/1.0/meta-data/local-ipv4`
    curl "http://$USER:$PASS@members.dyndns.org/nic/update?hostname=$LUHOST&&myip=$MY_IP"

    PUBLIC_IP=`curl http://169.254.169.254/1.0/meta-data/hostname`
    curl "http://$USER:$PASS@members.dyndns.org/nic/update?hostname=$PUBLIC&myip=$PUBLIC_IP"
}

function getValuesFromFile() {
    BOOT=`cut -d ' ' -f 1 $USERFILE`;
 	DNS=`cut -d ' ' -f 2 $USERFILE`;
    LUHOST=$DNS;
 	LUPORT=`cut -d ' ' -f 3 $USERFILE`;
 	SLOTS=`cut -d ' ' -f 4 $USERFILE`;
 	PUBLIC=`cut -d ' ' -f 5 $USERFILE`;
 	AGENT_COUNT=`cut -d ' ' -f 6 $USERFILE`;

    echo "Got Values [$BOOT $LUHOST $LUPORT $SLOTS $PUBLIC $AGENT_COUNT] from $USERFILE";
}

function updateDNS() {
    if [ "$ENV" = "LOCAL" ]; then
        updateDNS_LOCAL;
    else
        updateDNS_EC2;
    fi
}


start() {
	echo "STARTING VScape";
	collectConfigData;
	echo "STARTING VScape READING INPUT FILES";
    getValuesFromFile;

	echo `date` "STARTING " > $TMP/vscape-status.log

	if [ "$BOOT" = "-boot=true" ]; then
	
	   echo "THIS is a the BOOT Agent";
	   updateDNS
	
	   ## boot the agent
	    cd $ROOT/vscape1;
	    nohup ./boot.sh -boot $LUPORT 1 > $TMP/lookup.log 2>&1 &
	fi
	
	if [ "$BOOT" = "-boot=false" ]; then
		echo "THIS is regular Agent"
	    for ((i=2;i<=AGENT_COUNT+1;i+=1)); do
			echo "Starting Agent$i-1"
		    cd $ROOT/vscape$i;
		 	nohup ./boot.sh  stcp://$LUHOST:$LUPORT $SLOTS > $TMP/agent-$i.log 2>&1 &
	        sleep 4;
	    done
	fi
	RETVAL=$?
    echo "VScape is RUNNING"
    echo `date` " RUNNING" > $TMP/vscape-status.log
}
function stop(){
    echo "STOPPING VScape"
    for i in $( ls  /tmp/agent-*.pid ); do
	    echo "Stopping `cat $i`"
		kill -TERM  `cat $i`;
    done
	RETVAL=$?
    echo "STOPPED VScape"
    echo `date` " STOPPED" > $TMP/vscape-status.log
	rm /tmp/agent-*.pid
}

function status(){
    echo VScape is:`cat $TMP/vscape-status.log`;
}
function restart(){
    stop
    sleep 10
    start
}

# See how we were called.
case "$1" in
  start)
    start
	;;
  stop)
    stop
    ;;
  status)
    status
	RETVAL=$?
    ;;
  restart | condrestart)
    restart
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|condrestart|restart}"
    RETVAL=1
esac

exit $RETVAL
