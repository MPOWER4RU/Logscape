package com.liquidlabs.common;import java.io.IOException;import java.io.InputStream;import java.io.PushbackInputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@SuppressWarnings("unchecked")public class Decoder {	public Map decode(InputStream inputStream) {		PushbackInputStream pushback = new PushbackInputStream(inputStream);		try {			pushback.read();			return readDict(pushback);		} catch (IOException e) {			throw new RuntimeException(e);		}	}	private Map<String, Object> readDict(PushbackInputStream pushback)			throws IOException {		Map<String, Object>map = new HashMap<String, Object>();		char pushByte = (char) pushback.read();		while(pushByte != 'e') {			pushback.unread(pushByte);			String key = new String(readNext(pushback));			map.put(key, next(pushback, (char)pushback.read()));			pushByte = (char) pushback.read();		} 		return map;	}		private Long readNumber(PushbackInputStream pushback) throws IOException {		StringBuilder builder = new StringBuilder();		char push = (char) pushback.read();		while (push != 'e') {			builder.append(push);			push = (char) pushback.read();		}		return Long.valueOf(builder.toString());	}		private List readList(PushbackInputStream pushback) throws IOException {		List list = new ArrayList<String>();		char push = (char) pushback.read();		while(push != 'e') {			list.add(next(pushback, push));			push = (char) pushback.read();		} 		return list;	}	private Object next(PushbackInputStream pushback, char push)			throws IOException {		if (push == 'i') {			return readNumber(pushback);		} else if (push == 'd') {			return readDict(pushback);		} else if (push == 'l') {			return readList(pushback);		} else  {			pushback.unread(push);			return readNext(pushback);		}	}	private byte[] readNext(InputStream stream) throws IOException {		int length = nextLength(stream);		byte [] buf = new byte[length];		stream.read(buf, 0, buf.length);		return buf;	}	private Integer nextLength(InputStream stream)			throws IOException {		int read = 0;		StringBuilder builder = new StringBuilder();		while (read != ':') {			read = stream.read();			if (read != ':') {				builder.append((char)read);			}		}		return Integer.valueOf(builder.toString());	}}